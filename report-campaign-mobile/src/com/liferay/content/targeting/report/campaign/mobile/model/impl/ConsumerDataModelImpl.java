/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.content.targeting.report.campaign.mobile.model.impl;

import com.liferay.content.targeting.report.campaign.mobile.model.ConsumerData;
import com.liferay.content.targeting.report.campaign.mobile.model.ConsumerDataModel;
import com.liferay.content.targeting.report.campaign.mobile.model.ConsumerDataSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ConsumerData service. Represents a row in the &quot;CT_CMR_ConsumerData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.content.targeting.report.campaign.mobile.model.ConsumerDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConsumerDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConsumerDataImpl
 * @see com.liferay.content.targeting.report.campaign.mobile.model.ConsumerData
 * @see com.liferay.content.targeting.report.campaign.mobile.model.ConsumerDataModel
 * @generated
 */
@JSON(strict = true)
public class ConsumerDataModelImpl extends BaseModelImpl<ConsumerData>
	implements ConsumerDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a consumer data model instance should use the {@link com.liferay.content.targeting.report.campaign.mobile.model.ConsumerData} interface instead.
	 */
	public static final String TABLE_NAME = "CT_CMR_ConsumerData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "consumerDataId", Types.BIGINT },
			{ "campaignId", Types.BIGINT },
			{ "count", Types.INTEGER },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "eventType", Types.VARCHAR },
			{ "elementId", Types.VARCHAR },
			{ "consumerId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table CT_CMR_ConsumerData (consumerDataId LONG not null primary key,campaignId LONG,count INTEGER,modifiedDate DATE null,eventType VARCHAR(75) null,elementId VARCHAR(75) null,consumerId LONG)";
	public static final String TABLE_SQL_DROP = "drop table CT_CMR_ConsumerData";
	public static final String ORDER_BY_JPQL = " ORDER BY consumerData.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CT_CMR_ConsumerData.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.content.targeting.report.campaign.mobile.model.ConsumerData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.content.targeting.report.campaign.mobile.model.ConsumerData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.content.targeting.report.campaign.mobile.model.ConsumerData"),
			true);
	public static long CAMPAIGNID_COLUMN_BITMASK = 1L;
	public static long CONSUMERID_COLUMN_BITMASK = 2L;
	public static long EVENTTYPE_COLUMN_BITMASK = 4L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ConsumerData toModel(ConsumerDataSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ConsumerData model = new ConsumerDataImpl();

		model.setConsumerDataId(soapModel.getConsumerDataId());
		model.setCampaignId(soapModel.getCampaignId());
		model.setCount(soapModel.getCount());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEventType(soapModel.getEventType());
		model.setElementId(soapModel.getElementId());
		model.setConsumerId(soapModel.getConsumerId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ConsumerData> toModels(ConsumerDataSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ConsumerData> models = new ArrayList<ConsumerData>(soapModels.length);

		for (ConsumerDataSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.content.targeting.report.campaign.mobile.model.ConsumerData"));

	public ConsumerDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _consumerDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConsumerDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _consumerDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConsumerData.class;
	}

	@Override
	public String getModelClassName() {
		return ConsumerData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("consumerDataId", getConsumerDataId());
		attributes.put("campaignId", getCampaignId());
		attributes.put("count", getCount());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("eventType", getEventType());
		attributes.put("elementId", getElementId());
		attributes.put("consumerId", getConsumerId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long consumerDataId = (Long)attributes.get("consumerDataId");

		if (consumerDataId != null) {
			setConsumerDataId(consumerDataId);
		}

		Long campaignId = (Long)attributes.get("campaignId");

		if (campaignId != null) {
			setCampaignId(campaignId);
		}

		Integer count = (Integer)attributes.get("count");

		if (count != null) {
			setCount(count);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String eventType = (String)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		String elementId = (String)attributes.get("elementId");

		if (elementId != null) {
			setElementId(elementId);
		}

		Long consumerId = (Long)attributes.get("consumerId");

		if (consumerId != null) {
			setConsumerId(consumerId);
		}
	}

	@JSON
	@Override
	public long getConsumerDataId() {
		return _consumerDataId;
	}

	@Override
	public void setConsumerDataId(long consumerDataId) {
		_consumerDataId = consumerDataId;
	}

	@JSON
	@Override
	public long getCampaignId() {
		return _campaignId;
	}

	@Override
	public void setCampaignId(long campaignId) {
		_columnBitmask |= CAMPAIGNID_COLUMN_BITMASK;

		if (!_setOriginalCampaignId) {
			_setOriginalCampaignId = true;

			_originalCampaignId = _campaignId;
		}

		_campaignId = campaignId;
	}

	public long getOriginalCampaignId() {
		return _originalCampaignId;
	}

	@JSON
	@Override
	public int getCount() {
		return _count;
	}

	@Override
	public void setCount(int count) {
		_count = count;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		if (_originalModifiedDate == null) {
			_originalModifiedDate = _modifiedDate;
		}

		_modifiedDate = modifiedDate;
	}

	public Date getOriginalModifiedDate() {
		return _originalModifiedDate;
	}

	@JSON
	@Override
	public String getEventType() {
		if (_eventType == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (_originalEventType == null) {
			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public String getOriginalEventType() {
		return GetterUtil.getString(_originalEventType);
	}

	@JSON
	@Override
	public String getElementId() {
		if (_elementId == null) {
			return StringPool.BLANK;
		}
		else {
			return _elementId;
		}
	}

	@Override
	public void setElementId(String elementId) {
		_elementId = elementId;
	}

	@JSON
	@Override
	public long getConsumerId() {
		return _consumerId;
	}

	@Override
	public void setConsumerId(long consumerId) {
		_columnBitmask |= CONSUMERID_COLUMN_BITMASK;

		if (!_setOriginalConsumerId) {
			_setOriginalConsumerId = true;

			_originalConsumerId = _consumerId;
		}

		_consumerId = consumerId;
	}

	public long getOriginalConsumerId() {
		return _originalConsumerId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ConsumerData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConsumerData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConsumerData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConsumerDataImpl consumerDataImpl = new ConsumerDataImpl();

		consumerDataImpl.setConsumerDataId(getConsumerDataId());
		consumerDataImpl.setCampaignId(getCampaignId());
		consumerDataImpl.setCount(getCount());
		consumerDataImpl.setModifiedDate(getModifiedDate());
		consumerDataImpl.setEventType(getEventType());
		consumerDataImpl.setElementId(getElementId());
		consumerDataImpl.setConsumerId(getConsumerId());

		consumerDataImpl.resetOriginalValues();

		return consumerDataImpl;
	}

	@Override
	public int compareTo(ConsumerData consumerData) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				consumerData.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConsumerData)) {
			return false;
		}

		ConsumerData consumerData = (ConsumerData)obj;

		long primaryKey = consumerData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConsumerDataModelImpl consumerDataModelImpl = this;

		consumerDataModelImpl._originalCampaignId = consumerDataModelImpl._campaignId;

		consumerDataModelImpl._setOriginalCampaignId = false;

		consumerDataModelImpl._originalModifiedDate = consumerDataModelImpl._modifiedDate;

		consumerDataModelImpl._originalEventType = consumerDataModelImpl._eventType;

		consumerDataModelImpl._originalConsumerId = consumerDataModelImpl._consumerId;

		consumerDataModelImpl._setOriginalConsumerId = false;

		consumerDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ConsumerData> toCacheModel() {
		ConsumerDataCacheModel consumerDataCacheModel = new ConsumerDataCacheModel();

		consumerDataCacheModel.consumerDataId = getConsumerDataId();

		consumerDataCacheModel.campaignId = getCampaignId();

		consumerDataCacheModel.count = getCount();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			consumerDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			consumerDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		consumerDataCacheModel.eventType = getEventType();

		String eventType = consumerDataCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			consumerDataCacheModel.eventType = null;
		}

		consumerDataCacheModel.elementId = getElementId();

		String elementId = consumerDataCacheModel.elementId;

		if ((elementId != null) && (elementId.length() == 0)) {
			consumerDataCacheModel.elementId = null;
		}

		consumerDataCacheModel.consumerId = getConsumerId();

		return consumerDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{consumerDataId=");
		sb.append(getConsumerDataId());
		sb.append(", campaignId=");
		sb.append(getCampaignId());
		sb.append(", count=");
		sb.append(getCount());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", elementId=");
		sb.append(getElementId());
		sb.append(", consumerId=");
		sb.append(getConsumerId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.content.targeting.report.campaign.mobile.model.ConsumerData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>consumerDataId</column-name><column-value><![CDATA[");
		sb.append(getConsumerDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>campaignId</column-name><column-value><![CDATA[");
		sb.append(getCampaignId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>count</column-name><column-value><![CDATA[");
		sb.append(getCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>elementId</column-name><column-value><![CDATA[");
		sb.append(getElementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>consumerId</column-name><column-value><![CDATA[");
		sb.append(getConsumerId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ConsumerData.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ConsumerData.class
		};
	private long _consumerDataId;
	private long _campaignId;
	private long _originalCampaignId;
	private boolean _setOriginalCampaignId;
	private int _count;
	private Date _modifiedDate;
	private Date _originalModifiedDate;
	private String _eventType;
	private String _originalEventType;
	private String _elementId;
	private long _consumerId;
	private long _originalConsumerId;
	private boolean _setOriginalConsumerId;
	private long _columnBitmask;
	private ConsumerData _escapedModel;
}