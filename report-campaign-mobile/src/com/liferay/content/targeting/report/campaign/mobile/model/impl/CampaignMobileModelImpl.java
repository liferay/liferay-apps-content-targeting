/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.content.targeting.report.campaign.mobile.model.impl;

import com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobile;
import com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobileModel;
import com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobileSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CampaignMobile service. Represents a row in the &quot;CT_CMR_CampaignMobile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CampaignMobileImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CampaignMobileImpl
 * @see com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobile
 * @see com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobileModel
 * @generated
 */
@JSON(strict = true)
public class CampaignMobileModelImpl extends BaseModelImpl<CampaignMobile>
	implements CampaignMobileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a campaign mobile model instance should use the {@link com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobile} interface instead.
	 */
	public static final String TABLE_NAME = "CT_CMR_CampaignMobile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "campaignMobileId", Types.BIGINT },
			{ "campaignId", Types.BIGINT },
			{ "count", Types.INTEGER },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "eventType", Types.VARCHAR },
			{ "className", Types.VARCHAR },
			{ "classPK", Types.BIGINT },
			{ "elementId", Types.VARCHAR },
			{ "consumerId", Types.BIGINT },
			{ "placeholderId", Types.BIGINT },
			{ "userSegmentId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table CT_CMR_CampaignMobile (campaignMobileId LONG not null primary key,campaignId LONG,count INTEGER,modifiedDate DATE null,eventType VARCHAR(75) null,className VARCHAR(75) null,classPK LONG,elementId VARCHAR(75) null,consumerId LONG,placeholderId LONG,userSegmentId LONG)";
	public static final String TABLE_SQL_DROP = "drop table CT_CMR_CampaignMobile";
	public static final String ORDER_BY_JPQL = " ORDER BY campaignMobile.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CT_CMR_CampaignMobile.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobile"),
			true);
	public static long CAMPAIGNID_COLUMN_BITMASK = 1L;
	public static long CLASSNAME_COLUMN_BITMASK = 2L;
	public static long CLASSPK_COLUMN_BITMASK = 4L;
	public static long CONSUMERID_COLUMN_BITMASK = 8L;
	public static long EVENTTYPE_COLUMN_BITMASK = 16L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 32L;
	public static long PLACEHOLDERID_COLUMN_BITMASK = 64L;
	public static long USERSEGMENTID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CampaignMobile toModel(CampaignMobileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CampaignMobile model = new CampaignMobileImpl();

		model.setCampaignMobileId(soapModel.getCampaignMobileId());
		model.setCampaignId(soapModel.getCampaignId());
		model.setCount(soapModel.getCount());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setEventType(soapModel.getEventType());
		model.setClassName(soapModel.getClassName());
		model.setClassPK(soapModel.getClassPK());
		model.setElementId(soapModel.getElementId());
		model.setConsumerId(soapModel.getConsumerId());
		model.setPlaceholderId(soapModel.getPlaceholderId());
		model.setUserSegmentId(soapModel.getUserSegmentId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CampaignMobile> toModels(CampaignMobileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CampaignMobile> models = new ArrayList<CampaignMobile>(soapModels.length);

		for (CampaignMobileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobile"));

	public CampaignMobileModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _campaignMobileId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCampaignMobileId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _campaignMobileId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CampaignMobile.class;
	}

	@Override
	public String getModelClassName() {
		return CampaignMobile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("campaignMobileId", getCampaignMobileId());
		attributes.put("campaignId", getCampaignId());
		attributes.put("count", getCount());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("eventType", getEventType());
		attributes.put("className", getClassName());
		attributes.put("classPK", getClassPK());
		attributes.put("elementId", getElementId());
		attributes.put("consumerId", getConsumerId());
		attributes.put("placeholderId", getPlaceholderId());
		attributes.put("userSegmentId", getUserSegmentId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long campaignMobileId = (Long)attributes.get("campaignMobileId");

		if (campaignMobileId != null) {
			setCampaignMobileId(campaignMobileId);
		}

		Long campaignId = (Long)attributes.get("campaignId");

		if (campaignId != null) {
			setCampaignId(campaignId);
		}

		Integer count = (Integer)attributes.get("count");

		if (count != null) {
			setCount(count);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String eventType = (String)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String elementId = (String)attributes.get("elementId");

		if (elementId != null) {
			setElementId(elementId);
		}

		Long consumerId = (Long)attributes.get("consumerId");

		if (consumerId != null) {
			setConsumerId(consumerId);
		}

		Long placeholderId = (Long)attributes.get("placeholderId");

		if (placeholderId != null) {
			setPlaceholderId(placeholderId);
		}

		Long userSegmentId = (Long)attributes.get("userSegmentId");

		if (userSegmentId != null) {
			setUserSegmentId(userSegmentId);
		}
	}

	@JSON
	@Override
	public long getCampaignMobileId() {
		return _campaignMobileId;
	}

	@Override
	public void setCampaignMobileId(long campaignMobileId) {
		_campaignMobileId = campaignMobileId;
	}

	@JSON
	@Override
	public long getCampaignId() {
		return _campaignId;
	}

	@Override
	public void setCampaignId(long campaignId) {
		_columnBitmask |= CAMPAIGNID_COLUMN_BITMASK;

		if (!_setOriginalCampaignId) {
			_setOriginalCampaignId = true;

			_originalCampaignId = _campaignId;
		}

		_campaignId = campaignId;
	}

	public long getOriginalCampaignId() {
		return _originalCampaignId;
	}

	@JSON
	@Override
	public int getCount() {
		return _count;
	}

	@Override
	public void setCount(int count) {
		_count = count;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		if (_originalModifiedDate == null) {
			_originalModifiedDate = _modifiedDate;
		}

		_modifiedDate = modifiedDate;
	}

	public Date getOriginalModifiedDate() {
		return _originalModifiedDate;
	}

	@JSON
	@Override
	public String getEventType() {
		if (_eventType == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (_originalEventType == null) {
			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public String getOriginalEventType() {
		return GetterUtil.getString(_originalEventType);
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public String getElementId() {
		if (_elementId == null) {
			return StringPool.BLANK;
		}
		else {
			return _elementId;
		}
	}

	@Override
	public void setElementId(String elementId) {
		_elementId = elementId;
	}

	@JSON
	@Override
	public long getConsumerId() {
		return _consumerId;
	}

	@Override
	public void setConsumerId(long consumerId) {
		_columnBitmask |= CONSUMERID_COLUMN_BITMASK;

		if (!_setOriginalConsumerId) {
			_setOriginalConsumerId = true;

			_originalConsumerId = _consumerId;
		}

		_consumerId = consumerId;
	}

	public long getOriginalConsumerId() {
		return _originalConsumerId;
	}

	@JSON
	@Override
	public long getPlaceholderId() {
		return _placeholderId;
	}

	@Override
	public void setPlaceholderId(long placeholderId) {
		_columnBitmask |= PLACEHOLDERID_COLUMN_BITMASK;

		if (!_setOriginalPlaceholderId) {
			_setOriginalPlaceholderId = true;

			_originalPlaceholderId = _placeholderId;
		}

		_placeholderId = placeholderId;
	}

	public long getOriginalPlaceholderId() {
		return _originalPlaceholderId;
	}

	@JSON
	@Override
	public long getUserSegmentId() {
		return _userSegmentId;
	}

	@Override
	public void setUserSegmentId(long userSegmentId) {
		_columnBitmask |= USERSEGMENTID_COLUMN_BITMASK;

		if (!_setOriginalUserSegmentId) {
			_setOriginalUserSegmentId = true;

			_originalUserSegmentId = _userSegmentId;
		}

		_userSegmentId = userSegmentId;
	}

	public long getOriginalUserSegmentId() {
		return _originalUserSegmentId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CampaignMobile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CampaignMobile toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CampaignMobile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CampaignMobileImpl campaignMobileImpl = new CampaignMobileImpl();

		campaignMobileImpl.setCampaignMobileId(getCampaignMobileId());
		campaignMobileImpl.setCampaignId(getCampaignId());
		campaignMobileImpl.setCount(getCount());
		campaignMobileImpl.setModifiedDate(getModifiedDate());
		campaignMobileImpl.setEventType(getEventType());
		campaignMobileImpl.setClassName(getClassName());
		campaignMobileImpl.setClassPK(getClassPK());
		campaignMobileImpl.setElementId(getElementId());
		campaignMobileImpl.setConsumerId(getConsumerId());
		campaignMobileImpl.setPlaceholderId(getPlaceholderId());
		campaignMobileImpl.setUserSegmentId(getUserSegmentId());

		campaignMobileImpl.resetOriginalValues();

		return campaignMobileImpl;
	}

	@Override
	public int compareTo(CampaignMobile campaignMobile) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				campaignMobile.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CampaignMobile)) {
			return false;
		}

		CampaignMobile campaignMobile = (CampaignMobile)obj;

		long primaryKey = campaignMobile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CampaignMobileModelImpl campaignMobileModelImpl = this;

		campaignMobileModelImpl._originalCampaignId = campaignMobileModelImpl._campaignId;

		campaignMobileModelImpl._setOriginalCampaignId = false;

		campaignMobileModelImpl._originalModifiedDate = campaignMobileModelImpl._modifiedDate;

		campaignMobileModelImpl._originalEventType = campaignMobileModelImpl._eventType;

		campaignMobileModelImpl._originalClassName = campaignMobileModelImpl._className;

		campaignMobileModelImpl._originalClassPK = campaignMobileModelImpl._classPK;

		campaignMobileModelImpl._setOriginalClassPK = false;

		campaignMobileModelImpl._originalConsumerId = campaignMobileModelImpl._consumerId;

		campaignMobileModelImpl._setOriginalConsumerId = false;

		campaignMobileModelImpl._originalPlaceholderId = campaignMobileModelImpl._placeholderId;

		campaignMobileModelImpl._setOriginalPlaceholderId = false;

		campaignMobileModelImpl._originalUserSegmentId = campaignMobileModelImpl._userSegmentId;

		campaignMobileModelImpl._setOriginalUserSegmentId = false;

		campaignMobileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CampaignMobile> toCacheModel() {
		CampaignMobileCacheModel campaignMobileCacheModel = new CampaignMobileCacheModel();

		campaignMobileCacheModel.campaignMobileId = getCampaignMobileId();

		campaignMobileCacheModel.campaignId = getCampaignId();

		campaignMobileCacheModel.count = getCount();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			campaignMobileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			campaignMobileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		campaignMobileCacheModel.eventType = getEventType();

		String eventType = campaignMobileCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			campaignMobileCacheModel.eventType = null;
		}

		campaignMobileCacheModel.className = getClassName();

		String className = campaignMobileCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			campaignMobileCacheModel.className = null;
		}

		campaignMobileCacheModel.classPK = getClassPK();

		campaignMobileCacheModel.elementId = getElementId();

		String elementId = campaignMobileCacheModel.elementId;

		if ((elementId != null) && (elementId.length() == 0)) {
			campaignMobileCacheModel.elementId = null;
		}

		campaignMobileCacheModel.consumerId = getConsumerId();

		campaignMobileCacheModel.placeholderId = getPlaceholderId();

		campaignMobileCacheModel.userSegmentId = getUserSegmentId();

		return campaignMobileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{campaignMobileId=");
		sb.append(getCampaignMobileId());
		sb.append(", campaignId=");
		sb.append(getCampaignId());
		sb.append(", count=");
		sb.append(getCount());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", elementId=");
		sb.append(getElementId());
		sb.append(", consumerId=");
		sb.append(getConsumerId());
		sb.append(", placeholderId=");
		sb.append(getPlaceholderId());
		sb.append(", userSegmentId=");
		sb.append(getUserSegmentId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.content.targeting.report.campaign.mobile.model.CampaignMobile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>campaignMobileId</column-name><column-value><![CDATA[");
		sb.append(getCampaignMobileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>campaignId</column-name><column-value><![CDATA[");
		sb.append(getCampaignId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>count</column-name><column-value><![CDATA[");
		sb.append(getCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>elementId</column-name><column-value><![CDATA[");
		sb.append(getElementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>consumerId</column-name><column-value><![CDATA[");
		sb.append(getConsumerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeholderId</column-name><column-value><![CDATA[");
		sb.append(getPlaceholderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userSegmentId</column-name><column-value><![CDATA[");
		sb.append(getUserSegmentId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CampaignMobile.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CampaignMobile.class
		};
	private long _campaignMobileId;
	private long _campaignId;
	private long _originalCampaignId;
	private boolean _setOriginalCampaignId;
	private int _count;
	private Date _modifiedDate;
	private Date _originalModifiedDate;
	private String _eventType;
	private String _originalEventType;
	private String _className;
	private String _originalClassName;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _elementId;
	private long _consumerId;
	private long _originalConsumerId;
	private boolean _setOriginalConsumerId;
	private long _placeholderId;
	private long _originalPlaceholderId;
	private boolean _setOriginalPlaceholderId;
	private long _userSegmentId;
	private long _originalUserSegmentId;
	private boolean _setOriginalUserSegmentId;
	private long _columnBitmask;
	private CampaignMobile _escapedModel;
}