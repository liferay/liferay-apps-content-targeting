<?xml version="1.0"?>
<!DOCTYPE project>

<project xmlns:antelope="antlib:ise.antelope.tasks"
	xmlns:sonar="antlib:org.sonar.ant">
	<import file="../../build-common-plugins.xml" />

	<property file="sonar.${user.name}.properties" />
	<property file="sonar.${env.COMPUTERNAME}.properties" />
	<property file="sonar.${env.HOST}.properties" />
	<property file="sonar.${env.HOSTNAME}.properties" />
	<property file="sonar.properties" />

	<property name="app.core" value="*-api,*-hook,*-service,*-web,runtime-dependencies" />
	<property name="app.reports" value="report-campaign-content,report-campaign-tracking-action,report-user-segment-content" />
	<property name="app.rules" value="rule-age,rule-browser,rule-device,rule-facebook,rule-gender,rule-ip-geocode,rule-organization-member,rule-os,rule-role,rule-score-points,rule-site-member,rule-time,rule-user-group-member,rule-user-logged,rule-visited" />
	<property name="app.services" value="analytics-api,anonymous-users-api,content-targeting-api,report-campaign-content,report-campaign-tracking-action,report-user-segment-content,rule-score-points" />
	<property name="app.tracking.actions" value="tracking-action-content,tracking-action-form,tracking-action-link,tracking-action-page,tracking-action-youtube" />

	<target name="build-app">
		<antcall target="clean" />

		<antcall target="build-app-services" />

		<if>
			<not>
				<isset property="app.plugins.includes" />
			</not>
			<then>
				<property name="app.plugins.includes" value="${app.core},report-*,rule-*,tracking-action-*" />
			</then>
		</if>

		<path id="app.plugins.includes.path">
			<dirset dir="${sdk.dir}/apps/content-targeting" includes="${app.plugins.includes}" />
		</path>

		<pathconvert pathsep="," property="app.plugins.includes.path" refid="app.plugins.includes.path" targetos="unix" />

		<loop-macrodef-or-target
			module.dirs="${app.plugins.includes.path}"
			target.name="compile-import-shared"
		/>

		<loop-macrodef-or-target
			module.dirs="${app.plugins.includes.path}"
			target.name="deploy"
		/>
	</target>

	<target name="build-app-services">
		<path id="app.services.path">
			<dirset dir="." includes="${app.services}" />
		</path>

		<pathconvert pathsep="," property="app.services.path" refid="app.services.path" targetos="unix" />

		<loop-macrodef-or-target
			module.dirs="${app.services.path}"
			target.name="build-app-service"
		/>
	</target>

	<target name="build-lang">
		<loop-macrodef-or-target
			module.dirs="${plugins.includes.path}"
			target.name="build-lang"
		/>
	</target>

	<property name="app.tests" value="*-test,runtime-test-dependencies" />

	<path id="app.tests.path">
		<dirset dir="." includes="${app.tests}" />
	</path>

	<pathconvert pathsep="," property="app.tests.path" refid="app.tests.path" targetos="unix" />

	<target name="build-tests">
		<loop-macrodef-or-target
			module.dirs="${app.tests.path}"
			target.name="deploy"
		/>
	</target>

	<target name="clean-osgi-data">
		<delete dir="${app.server.parent.dir}/data/osgi" />
		<delete dir="${app.server.dir}/work" />
		<delete dir="${app.server.dir}/temp" />
	</target>

	<target name="consolidate-tests">
		<path id="app.core.path">
			<dirset dir="${sdk.dir}/apps/content-targeting" excludes="*-test" includes="*" />
		</path>

		<pathconvert pathsep="," property="app.core.path" refid="app.core.path" targetos="unix" />

		<loop-macrodef-or-target
			module.dirs="${app.core.path}"
			target.name="consolidate-test"
		/>
	</target>

	<target name="create-report">
		<if>
			<or>
				<not>
					<isset property="report.display.name" />
				</not>
				<not>
					<isset property="report.name" />
				</not>
			</or>
			<then>
				<fail>This task must be called by the create_report script.</fail>
			</then>
		</if>

		<property name="report.parent.dir" value="${user.dir}" />
		<property name="report.dir" value="${report.parent.dir}/report-${report.name}" />

		<if>
			<available file="${report.dir}" />
			<then>
				<fail>${report.dir} already exists.</fail>
			</then>
		</if>

		<copy todir="${report.dir}">
			<fileset
				dir="${user.dir}/tools/report_tmpl"
			/>
		</copy>

		<antelope:stringutil string="${report.display.name}" property="report.java.class.name">
			<antelope:replace regex="\s+" replacement="" />
			<antelope:trim />
		</antelope:stringutil>

		<antelope:stringutil string="${report.name}" property="report.java.package.name">
			<antelope:replace regex="-" replacement="." />
			<antelope:trim />
		</antelope:stringutil>

		<move
			file="${report.dir}/src/com/liferay/content/targeting/report/Report.java"
			tofile="${report.dir}/src/com/liferay/content/targeting/report/${report.java.package.name}/${report.java.class.name}Report.java"
		/>

		<replace dir="${report.dir}">
			<replacefilter token="@report.display.name@" value="${report.display.name}" />
			<replacefilter token="@report.java.class.name@" value="${report.java.class.name}" />
			<replacefilter token="@report.java.package.name@" value="${report.java.package.name}" />
			<replacefilter token="@report.name@" value="${report.name}" />
		</replace>
	</target>

	<target name="create-rule">
		<if>
			<or>
				<not>
					<isset property="rule.display.name" />
				</not>
				<not>
					<isset property="rule.name" />
				</not>
			</or>
			<then>
				<fail>This task must be called by the create_rule script.</fail>
			</then>
		</if>

		<property name="rule.parent.dir" value="${user.dir}" />
		<property name="rule.dir" value="${rule.parent.dir}/rule-${rule.name}" />

		<if>
			<available file="${rule.dir}" />
			<then>
				<fail>${rule.dir} already exists.</fail>
			</then>
		</if>

		<copy todir="${rule.dir}">
			<fileset
				dir="${user.dir}/tools/rule_tmpl"
			/>
		</copy>

		<antelope:stringutil string="${rule.display.name}" property="rule.java.class.name">
			<antelope:replace regex="\s+" replacement="" />
			<antelope:trim />
		</antelope:stringutil>

		<antelope:stringutil string="${rule.name}" property="rule.java.package.name">
			<antelope:replace regex="-" replacement="." />
			<antelope:trim />
		</antelope:stringutil>

		<move
			file="${rule.dir}/src/com/liferay/content/targeting/rule/Rule.java"
			tofile="${rule.dir}/src/com/liferay/content/targeting/rule/${rule.java.package.name}/${rule.java.class.name}Rule.java"
		/>

		<replace dir="${rule.dir}">
			<replacefilter token="@rule.display.name@" value="${rule.display.name}" />
			<replacefilter token="@rule.java.class.name@" value="${rule.java.class.name}" />
			<replacefilter token="@rule.java.package.name@" value="${rule.java.package.name}" />
			<replacefilter token="@rule.name@" value="${rule.name}" />
		</replace>
	</target>

	<target name="create-tracking-action">
		<if>
			<or>
				<not>
					<isset property="tracking.action.display.name" />
				</not>
				<not>
					<isset property="tracking.action.name" />
				</not>
			</or>
			<then>
				<fail>This task must be called by the create_tracking_action script.</fail>
			</then>
		</if>

		<property name="tracking.action.parent.dir" value="${user.dir}" />
		<property name="tracking.action.dir" value="${tracking.action.parent.dir}/tracking-action-${tracking.action.name}" />

		<if>
			<available file="${tracking.action.dir}" />
			<then>
				<fail>${tracking.action.dir} already exists.</fail>
			</then>
		</if>

		<copy todir="${tracking.action.dir}">
			<fileset
				dir="${user.dir}/tools/tracking_action_tmpl"
			/>
		</copy>

		<antelope:stringutil string="${tracking.action.display.name}" property="tracking.action.java.class.name">
			<antelope:replace regex="\s+" replacement="" />
			<antelope:trim />
		</antelope:stringutil>

		<antelope:stringutil string="${tracking.action.name}" property="tracking.action.java.package.name">
			<antelope:replace regex="-" replacement="." />
			<antelope:trim />
		</antelope:stringutil>

		<move
			file="${tracking.action.dir}/src/com/liferay/content/targeting/tracking/action/TrackingAction.java"
			tofile="${tracking.action.dir}/src/com/liferay/content/targeting/tracking/action/${tracking.action.java.package.name}/${tracking.action.java.class.name}TrackingAction.java"
		/>

		<replace dir="${tracking.action.dir}">
			<replacefilter token="@tracking.action.display.name@" value="${tracking.action.display.name}" />
			<replacefilter token="@tracking.action.java.class.name@" value="${tracking.action.java.class.name}" />
			<replacefilter token="@tracking.action.java.package.name@" value="${tracking.action.java.package.name}" />
			<replacefilter token="@tracking.action.name@" value="${tracking.action.name}" />
		</replace>
	</target>

	<target name="release">
		<if>
			<and>
				<isset property="release.all" />
				<equals arg1="${release.all}" arg2="true" />
			</and>
			<else>
				<property name="app.plugins.includes" value="${app.core},${app.reports},${app.rules},${app.tracking.actions}" />
			</else>
		</if>

		<if>
			<not>
				<isset property="release.version" />
			</not>
			<then>
				<tstamp>
					<format property="release.version" pattern="EEE-d-MMM-yyyy-HH-mm-ss" />
				</tstamp>
			</then>
		</if>

		<delete dir="${sdk.dir}/dist" failonerror="false" />
		<delete file="${sdk.dir}/content-targeting-release-${release.version}.zip" failonerror="false" />

		<mkdir dir="${sdk.dir}/content-targeting-dist" />

		<var name="auto.deploy.dir.default" value="${auto.deploy.dir}" />
		<var name="auto.deploy.dir" value="${sdk.dir}/content-targeting-dist" />

		<antcall target="build-app" />

		<zip
			basedir="${auto.deploy.dir}"
			destfile="${sdk.dir}/content-targeting-release-${release.version}.zip"
		/>

		<copy todir="${auto.deploy.dir.default}">
			<fileset dir="${auto.deploy.dir}" />
		</copy>

		<delete dir="${auto.deploy.dir}" failonerror="false" />
	</target>

	<target name="sonar">
		<taskdef resource="org/sonar/ant/antlib.xml" uri="antlib:org.sonar.ant">
			<classpath path="${sdk.dir}/lib/sonar-ant-task.jar" />
		</taskdef>

		<sonar:sonar />
	</target>

	<macrodef name="build-app-service">
		<attribute name="module.dir" />

		<sequential>
			<process-ivy module.dir="@{module.dir}" />

			<compile-import-shared module.dir="@{module.dir}" />

			<ant dir="@{module.dir}" target="build-service" inheritAll="false" />
		</sequential>
	</macrodef>

	<macrodef name="build-lang">
		<attribute name="module.dir" />

		<sequential>
			<ant dir="@{module.dir}" target="build-lang" inheritAll="false" />
		</sequential>
	</macrodef>

	<macrodef name="consolidate-test">
		<attribute name="module.dir" />

		<sequential>
			<copy todir="@{module.dir}/test-results" failonerror="false">
				<fileset dir="@{module.dir}/test-results/integration" />
				<fileset dir="@{module.dir}/test-results/unit" />
			</copy>
		</sequential>
	</macrodef>
</project>